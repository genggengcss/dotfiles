set nocompatible	" Use Vim defaults instead of 100% vi compatibility

" ==> Plugins ------------------------------------------------------------------
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugins')

" Make sure you use single quotes

" Fundamental
Plug 'scrooloose/nerdtree'
" Plug 'Valloric/YouCompleteMe'
Plug 'davidhalter/jedi-vim'
Plug 'ervandew/supertab'
Plug 'skywind3000/asyncrun.vim'
Plug 'kien/ctrlp.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'majutsushi/tagbar'
Plug 'Yggdroot/indentLine'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'godlygeek/tabular'

" Productive
Plug 'tpope/vim-commentary'
Plug 'easymotion/vim-easymotion'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'

" Appearance
Plug 'luochen1990/rainbow'
Plug 'vim-airline/vim-airline'
Plug 'edkolev/tmuxline.vim'
Plug 'Xuyuanp/nerdtree-git-plugin'

" Funny
Plug 'guns/xterm-color-table.vim'

" Initialize plugin system
call plug#end()
filetype plugin indent on    

" ==> Plugin Settings ----------------------------------------------------

" NERDTree Settings
" open a NERDTree automatically when vim starts up
"autocmd vimenter * NERDTree
"open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"autocmd StdinReadPre * let s:std_in=1
" set NERDTree width
let NERDTreeWinSize=25
" bookmark
let NERDTreeShowBookmarks=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
"map F2 to open NERDTree
map <C-n> :NERDTreeToggle<CR>
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" default arrow symbols
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" AsyncRun Settings
let g:asyncrun_open = 8
noremap <leader>r :w \| AsyncRun python %<cr>
noremap <leader>s :AsyncStop<cr>

" ctrlp Settings
" Change the default mapping and the default command to invoke CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
" set local working directory
let g:ctrlp_working_path_mode = 'ra'
" Exclude files and directories 
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" let g:ctrlp_custom_ignore = {
"   \ 'dir':  '\v[\/]\.(git|hg|svn)$',
"   \ 'file': '\v\.(exe|so|dll)$',
"   \ 'link': 'some_bad_symbolic_links',
"   \ }
" Use a custom file listing command
let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux

" vim-airline Settings
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
nnoremap <leader>] :bn<CR>
nnoremap <leader>[ :bp<CR>
"let g:airline_theme='molokai_original'
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
"let g:airline#extensions#tabline#formatter = 'default'
"let g:airline_left_sep = '⮀'
"let g:airline_left_alt_sep = '⮁'
"let g:airline_right_sep = '⮂'
"let g:airline_right_alt_sep = '⮃'
"let g:airline_symbols.branch = '⭠'
"let g:airline_symbols.readonly = '⭤'

" YCM Settings
" 关闭补全的提示
set completeopt=menu,menuone
let g:ycm_add_preview_to_completeop = 0
let g:ycm_python_binary_path = '$ANACONDAPATH/bin/python'
" C family Completion Path
" let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'
" 跳转快捷键
nnoremap <leader>ge :YcmCompleter GoToDeclaration<CR>|
nnoremap <leader>gd :YcmCompleter GoToDefinition<CR>| 
" nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>|
" 停止提示是否载入本地ycm_extra_conf文件
" let g:ycm_confirm_extra_conf = 0
" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax = 1
" 开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_tags_files = 1
" 从第2个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=2
" 在注释输入中也能补全
let g:ycm_complete_in_comments = 1
" 在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
" 注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1
" 弹出列表时选择第1项的快捷键(默认为<TAB>和<Down>)
let g:ycm_key_list_select_completion = ['<TAB>','<C-n>', '<Down>']
" 弹出列表时选择前1项的快捷键(默认为<S-TAB>和<UP>)
let g:ycm_key_list_previous_completion = ['<S-TAB>','<C-p>', '<Up>']
" 主动补全, 默认为<C-Space>
" let g:ycm_key_invoke_completion = ['<C-Space>']
" 停止显示补全列表(防止列表影响视野), 可以按<C-Space>重新弹出
let g:ycm_key_list_stop_completion = ['<C-\>']

let g:ycm_semantic_triggers =  {
	\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
	\ 'cs,lua,javascript': ['re!\w{2}'],
	\ }
" 白名单
let g:ycm_filetype_whitelist = { 
			\ "c":1,
			\ "cpp":1, 
			\ "python":1,
			\ "sh":1,
			\ "zsh":1,
			\ "vim":1,
			\ }

" Dash Settings
:nmap <silent> <leader>d <Plug>DashSearch
let g:dash_activate = 1
let g:dash_map = {
        \ 'python' : ['Python\ 3', 'Python\ 2','Beautiful\ Soup','NumPy','TensorFlow','Pandas','torchvision','PyTorch','Matplotlib']
        \ }

" nerd_git Settings
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" rainbow config
let g:rainbow_active = 1
let g:rainbow_conf = {
	\	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
	\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
	\	'operators': '_,_',
	\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
	\	'separately': {
	\		'*': {},
	\		'tex': {
	\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
	\		},
	\		'lisp': {
	\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
	\		},
	\		'vim': {
	\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
	\		},
	\		'html': {
	\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
	\		},
	\		'css': 0,
	\	}
	\}

" supertab config
" let g:SuperTabDefaultCompletionType = "<c-n>"
" let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

" majutsushi/tagbar Settings
nmap <F8> :TagbarToggle<CR>

" SirVer/ultisnips Settings
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<c-s-c>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"


" ==> General Settings ------------------------------------------------

syntax on
set modelines=0		
set backspace=2		" more powerful backspacing
set nu!
set autoindent
set cursorline
set clipboard=unnamed " 设置vim中默认使用选择缓冲区寄存器 "*
set autochdir " vim自动切换工作目录为当前文件所在目录
set mouse=a
set pastetoggle=<F10>
set encoding=utf-8 
" set laststatus=2

" colorscheme
colorscheme molokai
" colorscheme solarized8_flat
" let g:solarized_termcolors=256
" colorscheme solarized
" set background=dark

" colorscheme-molokai config
" let g:molokai_original = 1
" let g:rehash256 = 1

" monokai config
" set termguicolors
" let g:monokai_term_italic = 1
" let g:monokai_gui_italic = 1

" search 
set ignorecase
set hlsearch
set incsearch
set smartcase

" disable backup and swap files
set nobackup       " no backup files
set noswapfile     " no swap files
set nowritebackup  " only in case you don't want a backup file while editing
set noundofile     " no undo files

" tab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab


" ==> Key mapping -----------------------------------------------------------------
nnoremap <silent><backspace> :nohl<cr>

" keys to move around the windows
inoremap <c-h> <left>
inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-l> <right>

" switch buffers
noremap <silent><leader>[ :bp<cr>
noremap <silent><leader>] :bn<cr>
noremap <silent><leader>1 :b! 1<cr>
noremap <silent><leader>2 :b! 2<cr>
noremap <silent><leader>3 :b! 3<cr>
noremap <silent><leader>4 :b! 4<cr>
noremap <silent><leader>5 :b! 5<cr>
noremap <silent><leader>6 :b! 6<cr>
noremap <silent><leader>7 :b! 7<cr>
noremap <silent><leader>8 :b! 8<cr>
noremap <silent><leader>9 :b! 9<cr>
noremap <silent><leader>0 :b! 10<cr>

" important!!!! The command below must be placed at the end of the .vimrc file
set noesckeys
